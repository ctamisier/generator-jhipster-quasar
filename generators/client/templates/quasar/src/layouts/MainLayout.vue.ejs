<template>
  <q-layout view="lHh Lpr lFf">
    <q-header elevated>
      <q-toolbar>
        <q-btn v-if="authStore.isAuthenticated" flat dense round icon="menu" aria-label="Menu" @click="toggleLeftDrawer" />
        <q-toolbar-title>
          <div class="q-gutter-x-sm">
            <span class="text-uppercase"><%= baseName %></span>
            <small>{{ appVersion }}</small>
          </div>
        </q-toolbar-title>
        <q-btn flat round :icon="$q.dark.isActive ? 'dark_mode' : 'light_mode'" @click="changeTheme()" />
        <div>Quasar v{{ $q.version }}</div>
      </q-toolbar>
    </q-header>

    <q-drawer
      v-if="authStore.isAuthenticated"
      v-model="data.leftDrawerOpen"
      show-if-above
      :mini="data.miniState"
      mini-to-overlay
      :width="250"
      :breakpoint="500"
      bordered
      @mouseover="data.miniState = false"
      @mouseout="data.miniState = true"
    >
      <q-item v-for="menuItem in menuItems()" :key="menuItem.to" v-ripple :to="menuItem.to">
        <q-item-section avatar>
          <q-icon :name="menuItem.icon" />
        </q-item-section>
        <q-item-section>
          {{ $t(menuItem.i18nKey) }}
        </q-item-section>
      </q-item>
      <q-item v-ripple clickable @click="logout">
        <q-item-section avatar>
          <q-icon name="logout" />
        </q-item-section>
        <q-item-section>
          {{ $t('global.menu.account.logout') }}
        </q-item-section>
      </q-item>
    </q-drawer>

    <q-page-container>
      <router-view v-slot="{ Component }">
        <transition enter-active-class="animated fadeIn" leave-active-class="animated fadeOut" duration="150" mode="out-in">
          <component :is="Component" />
        </transition>
      </router-view>
    </q-page-container>
  </q-layout>
</template>

<script setup>
import { LocalStorage, useQuasar } from 'quasar';
import { useAuthStore } from 'stores/auth-store';
import { reactive } from 'vue';
import { useRouter } from 'vue-router';
import { authLogout } from 'app/src/auth/authentication';

const authStore = useAuthStore();
const router = useRouter();
const $q = useQuasar();

const appVersion = process.env.APP_VERSION;

const data = reactive({ leftDrawerOpen: false, miniState: true });

if (LocalStorage.has('dark-mode')) {
  $q.dark.set(LocalStorage.getItem('dark-mode'));
} else {
  $q.dark.set($q.dark.mode);
}

function menuItems() {
  return [
<%_ if (authenticationType !== 'oauth2' ) { _%>
    { to: '/account', icon: 'account_circle', i18nKey: 'global.menu.account.main', enabled: true },
    { to: '/password', icon: 'password', i18nKey: 'global.menu.account.password', enabled: true },
    { to: '/users', icon: 'people', i18nKey: 'global.menu.admin.userManagement', enabled: authStore.hasRoleAdmin },
<%_ } _%>
    { to: '/configuration', icon: 'settings', i18nKey: 'global.menu.admin.configuration', enabled: authStore.hasRoleAdmin },
    { to: '/health', icon: 'health_and_safety', i18nKey: 'global.menu.admin.health', enabled: authStore.hasRoleAdmin },
    { to: '/metrics', icon: 'analytics', i18nKey: 'global.menu.admin.metrics', enabled: authStore.hasRoleAdmin },
    { to: '/logs', icon: 'text_snippet', i18nKey: 'global.menu.admin.logs', enabled: authStore.hasRoleAdmin },
    { to: '/docs', icon: 'menu_book', i18nKey: 'global.menu.admin.apidocs', enabled: authStore.hasRoleAdmin },
    ...[],
  ].filter(item => item.enabled);
}

function toggleLeftDrawer() {
  data.leftDrawerOpen = !data.leftDrawerOpen;
}

function changeTheme() {
  $q.dark.toggle();
  LocalStorage.set('dark-mode', $q.dark.mode);
}

function logout() {
  data.leftDrawerOpen = false;
  data.miniState = true;
  authLogout(authStore, router);
}
</script>
