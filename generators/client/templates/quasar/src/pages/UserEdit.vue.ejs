<template>
  <q-page class="q-pa-md flex flex-center">
    <q-form class="responsive-width q-gutter-md" greedy @submit="onSubmit">
      <q-input
        v-model="user.data.login"
        :label="$t('userManagement.login')"
        lazy-rules
        :rules="[$rules.required(), $rules.maxLength(50)]"
        data-cy="login"
        @keydown.enter.prevent
      />
      <q-input
        v-model="user.data.firstName"
        :label="$t('userManagement.firstName')"
        lazy-rules
        :rules="[$rules.maxLength(50)]"
        data-cy="firstName"
        @keydown.enter.prevent
      />
      <q-input
        v-model="user.data.lastName"
        :label="$t('userManagement.lastName')"
        lazy-rules
        :rules="[$rules.maxLength(50)]"
        data-cy="lastName"
        @keydown.enter.prevent
      />
      <q-input
        v-model="user.data.email"
        type="email"
        :label="$t('userManagement.email')"
        lazy-rules
        :rules="[$rules.required(), $rules.minLength(5), $rules.maxLength(254)]"
        data-cy="email"
        @keydown.enter.prevent
      />
      <q-checkbox v-if="route.params.login" v-model="user.data.activated" :label="$t('userManagement.activated')" data-cy="activated" />
      <q-select
        v-model="user.data.langKey"
        :options="langObjects"
        option-value="key"
        option-label="value"
        emit-value
        map-options
        :label="$t('userManagement.langKey')"
        :rules="[$rules.required()]"
        data-cy="langKey"
      />
      <q-select
        v-model="user.data.authorities"
        :options="availableRoles"
        :label="$t('userManagement.profiles')"
        multiple
        data-cy="authorities"
      >
        <template #option="{ itemProps, opt, selected, toggleOption }">
          <q-item v-bind="itemProps">
            <q-item-section>
              <q-item-label>{{ opt }}</q-item-label>
            </q-item-section>
            <q-item-section side>
              <q-toggle :model-value="selected" data-cy="toggle" @update:model-value="toggleOption(opt)" />
            </q-item-section>
          </q-item>
        </template>
      </q-select>
      <div class="flex justify-between">
        <q-btn type="submit" color="primary" :label="$t('entity.action.save')" data-cy="submit" :loading="loading" :disable="loading" />
      </div>
    </q-form>
  </q-page>
</template>

<script setup>
import { api } from 'boot/axios';
import { useQuasar } from 'quasar';
import { reactive, ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';
import { langObjects } from '../constants/i18nConstants';

const { t } = useI18n();
const $q = useQuasar();
const router = useRouter();
const route = useRoute();

const availableRoles = ['ROLE_ADMIN', 'ROLE_USER'];

const user = reactive({
  data: {
    id: null,
    login: null,
    firstName: null,
    lastName: null,
    email: null,
    activated: false,
    langKey: null,
    authorities: null,
  },
});

const loading = ref(false);

async function fetchUser() {
  if (route.params.login) {
    user.data = (await api.get(`/api/admin/users/${route.params.login}`)).data;
  }
}

fetchUser();

async function onSubmit() {
  loading.value = true;
  try {
    await api({
      method: user.data.id ? 'put' : 'post',
      url: '/api/admin/users',
      data: user.data,
    });
    router.back();
  } catch (e) {
    $q.notify({
      type: 'negative',
      message: t(e.response.data.message),
    });
    loading.value = false;
  }
}
</script>
