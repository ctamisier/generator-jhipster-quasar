<template>
  <q-page class="q-pa-md flex flex-center">
    <q-form v-if="!authStore.isAuthenticated" class="responsive-width q-gutter-md" greedy @submit="onSubmit">
      <q-input
        v-model="credentials.username"
        autocomplete="on"
        :label="$t('global.form[\'username.label\']')"
        lazy-rules
        :rules="[$rules.required(), $rules.minLength(4)]"
        data-cy="username"
      />
      <q-input
        v-model="credentials.password"
        autocomplete="current-password"
        type="password"
        :label="$t('login.form.password')"
        lazy-rules
        :rules="[$rules.required(), $rules.minLength(4)]"
        data-cy="password"
      />
      <q-checkbox v-model="credentials.rememberMe" :label="$t('login.form.rememberme')" data-cy="rememberme" />
      <div class="flex column">
        <q-btn type="submit" color="primary" :label="$t('login.form.button')" :loading="loading" :disable="loading" data-cy="submit" />
        <q-btn to="/account/reset/init" flat color="primary" :label="$t('login.password.forgot')" />
      </div>
      <div class="q-pt-xl column items-center">
        <div class="col">
          {{ $t('global.messages.info.register.noaccount') }}
        </div>
        <div class="col">
          <q-btn to="/register" flat color="primary" :label="$t('global.menu.account.register')" />
        </div>
      </div>
    </q-form>
    <div v-if="authStore.isAuthenticated">
<%- include('../partials/logos.ejs') _%>
    </div>
  </q-page>
</template>

<script setup>
import { useQuasar } from 'quasar';
import { useAuthStore } from 'stores/auth-store';
import { reactive, ref } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { authLogin } from 'app/src/auth/authentication';

const authStore = useAuthStore();
const $q = useQuasar();
const route = useRoute();
const router = useRouter();

const credentials = reactive({
  username: '',
  password: '',
  rememberMe: false,
});

const loading = ref(false);

async function onSubmit() {
  loading.value = true;
  try {
    await authLogin(authStore, router, route, credentials);
  } catch (e) {
    authStore.logout();
    $q.notify({
      type: 'negative',
      message: 'Operation failed',
    });
  } finally {
    loading.value = false;
  }
}
</script>
