<%_
const relationshipsToOneOwner = (relationships || [])
  .filter(relationship => relationship.relationshipType.includes('-to-one'))
  .filter(relationship => relationship.ownerSide)

const relationshipsToManyOwner = (relationships || [])
  .filter(relationship => relationship.relationshipType.includes('-to-many'))
  .filter(relationship => relationship.ownerSide)

const hasInstant = (fields) => fields.some(field => field.fieldType === 'Instant');
_%>
<template>
  <q-page class="q-pa-md flex flex-center">
    <div class="responsive-width q-gutter-md">
<%_ for (field of fields.filter(field => !field.id)) { _%>
<%_ if (field.fieldType === 'Boolean') { _%>
      <q-field :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')" readonly stack-label>
        <template #control>
          <q-icon :name="`${<%= entityInstance %>.data.<%= field.fieldName %> ? 'check_box' : 'check_box_outline_blank'}`" size="sm" />
        </template>
      </q-field>
<%_ } else { _%>
      <q-field :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')" readonly stack-label>
        <template #control>
<%_ if (field.fieldType === 'Instant') { _%>
          <div>
            <div>{{ <%= entityInstance %>.data.<%= field.fieldName %> && format(parseISO(<%= entityInstance %>.data.<%= field.fieldName %>)) }}</div>
            <div>
              <small>{{ <%= entityInstance %>.data.<%= field.fieldName %> }}</small>
            </div>
          </div>
<%_ } else { _%>
          {{ <%= entityInstance %>.data.<%= field.fieldName %> }}
<%_ } _%>
        </template>
      </q-field>
<%_ } } _%>
<%_ for (relationship of relationshipsToOneOwner) { _%>
      <q-field :label="$t('<%= i18nKeyPrefix %>.<%= relationship.relationshipName %>')" readonly stack-label>
        <template #control>
          {{ <%= entityInstance %>.data.<%= relationship.relationshipName %> && <%= entityInstance %>.data.<%= relationship.relationshipName %>.<%= relationship.otherEntityField %> }}
        </template>
      </q-field>
<%_ } _%>
<%_ for (relationship of relationshipsToManyOwner) { _%>
      <q-field :label="$t('<%= i18nKeyPrefix %>.<%= relationship.relationshipName %>')" readonly stack-label>
        <template #control>
          <q-list dense>
            <q-item
              v-for="<%= relationship.relationshipName %> in <%= entityInstance %>.data.<%= relationship.relationshipNamePlural %>"
              :key="<%= relationship.relationshipName %>.id"
            >
              <q-item-section>
                {{ <%= relationship.relationshipName %>.<%= relationship.otherEntityField %> }}
              </q-item-section>
            </q-item>
          </q-list>
        </template>
      </q-field>
<%_ } _%>
      <div class="flex justify-end">
        <router-link v-slot="{ navigate }" :to="`/<%= entityApiUrl %>/${<%= entityInstance %>.data.id}/edit`" custom>
          <q-btn icon="edit" color="primary" @click="navigate" />
        </router-link>
      </div>
    </div>
  </q-page>
</template>

<script setup>
import { api } from 'boot/axios';
<%_ if (hasInstant(fields)) { _%>
import { parseISO } from 'date-fns';
<%_ } _%>
import { reactive } from 'vue';
import { useRoute } from 'vue-router';
<%_ if (hasInstant(fields)) { _%>
import { format } from '../../../util/format';
<%_ } _%>

const route = useRoute();

const <%= entityInstance %> = reactive({
  data: {
<%_ for(field of fields) { _%>
    <%= field.fieldName %>: null,
<%_} _%>
<%_ for (relationship of relationshipsToOneOwner) { _%>
    <%= relationship.relationshipName %>: null,
<%_} _%>
<%_ for (relationship of relationshipsToManyOwner) { _%>
    <%= relationship.relationshipNamePlural %>: null,
<%_} _%>
  },
});

async function fetch<%= entityAngularName %>() {
  if (route.params.id) {
    <%= entityInstance %>.data = (await api.get(`/api/<%= entityApiUrl %>/${route.params.id}`)).data;
  }
}

fetch<%= entityAngularName %>();
</script>
