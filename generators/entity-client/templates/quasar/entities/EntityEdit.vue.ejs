<%_
const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);

const validators = {
  required: { value: 'required' },
  minlength: { value: 'minLength', lengthField: 'fieldValidateRulesMinlength' },
  maxlength: { value: 'maxLength', lengthField: 'fieldValidateRulesMaxlength' },
  min: { value: 'minValue', lengthField: 'fieldValidateRulesMin' },
  max: { value: 'maxValue', lengthField: 'fieldValidateRulesMax' },
  Integer: { value: 'integer' },
  Long: { value: 'integer' },
  BigDecimal: { value: 'decimal' },
  Float: { value: 'decimal' },
  Double: { value: 'decimal' },
}

const applyValidators = (fieldType, rules) => {
  return ([fieldType].concat(rules))
    .filter(rule => validators[rule])
    .map(rule => {
        const validator = validators[rule];
        const length = field[validator.lengthField] || ''
        return `$rules.${validator.value}(${length})` })
    .join(', ')
}

const isNumber = (fieldType) => isIntegerishNumber(fieldType) || ['BigDecimal', 'Float', 'Double'].includes(fieldType);

const isIntegerishNumber = (fieldType) => ['Integer', 'Long'].includes(fieldType);

const relationshipsToOneOwner = (relationships || [])
  .filter(relationship => relationship.relationshipType.includes('-to-one'))
  .filter(relationship => relationship.ownerSide)

const relationshipsToManyOwner = (relationships || [])
  .filter(relationship => relationship.relationshipType.includes('-to-many'))
  .filter(relationship => relationship.ownerSide)
_%>
<template>
  <q-page class="q-pa-md flex flex-center">
    <q-form
      @submit="onSubmit"
      class="responsive-width q-gutter-md"
      greedy
    >
<%_ for (field of fields.filter(field => !field.id)) { _%>
<%_ if (field.fieldIsEnum) { _%>
      <q-select
        v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')"
        :options="[null, <%- field.enumValues.map(item => `'${item.value}'`).join(', ') _%>]"
<%_ if (field.fieldValidate) { _%>
        :rules="[<%- applyValidators(field.fieldType, field.fieldValidateRules) _%>]"
<%_ } _%>
      />
<%_ } else if (field.fieldType === 'Boolean') { _%>
      <q-checkbox
        v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')"
<%_ if (field.fieldValidate) { _%>
        :rules="[<%- applyValidators(field.fieldType, field.fieldValidateRules) _%>]"
<%_ } _%>
      />
<%_ } else if (field.fieldType === 'LocalDate') { _%>
      <q-input
        v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')"
        @keydown.enter.prevent
      >
        <template v-slot:append>
          <q-icon
            name="event"
            class="cursor-pointer"
          >
            <q-popup-proxy
              ref="qDateProxy"
              transition-show="scale"
              transition-hide="scale"
            >
              <q-date
                v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
                mask="YYYY-MM-DD"
              >
                <div class="row items-center justify-end">
                  <q-btn
                    v-close-popup
                    color="primary"
                    flat
                  >
                    <q-icon name="close" />
                  </q-btn>
                </div>
              </q-date>
            </q-popup-proxy>
          </q-icon>
        </template>
      </q-input>
<%_ } else if (field.fieldType === 'Instant') { _%>
      <q-input
        v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')"
        @keydown.enter.prevent
      >
        <template v-slot:prepend>
          <q-icon
            name="event"
            class="cursor-pointer"
          >
            <q-popup-proxy
              transition-show="scale"
              transition-hide="scale"
            >
              <q-date
                v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
                mask="YYYY-MM-DDTHH:mm:ssZ"
              >
                <div class="row items-center justify-end">
                  <q-btn
                    v-close-popup
                    color="primary"
                    flat
                  >
                    <q-icon name="close" />
                  </q-btn>
                </div>
              </q-date>
            </q-popup-proxy>
          </q-icon>
        </template>
        <template v-slot:append>
          <q-icon
            name="access_time"
            class="cursor-pointer"
          >
            <q-popup-proxy
              transition-show="scale"
              transition-hide="scale"
            >
              <q-time
                v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
                mask="YYYY-MM-DDTHH:mm:ssZ"
                format24h
              >
                <div class="row items-center justify-end">
                  <q-btn
                    v-close-popup
                    color="primary"
                    flat
                  >
                    <q-icon name="close" />
                  </q-btn>
                </div>
              </q-time>
            </q-popup-proxy>
          </q-icon>
        </template>
      </q-input>
<%_ } else { _%>
      <q-input
        v-model="<%= entityInstance %>.data.<%= field.fieldName %>"
<%_ if (isIntegerishNumber(field.fieldType)) { _%>
        type="number"
<%_ } _%>
        :label="$t('<%= i18nKeyPrefix %>.<%= field.fieldName %>')"
<%_ if ((field.fieldValidate) || isNumber(field.fieldType)) { _%>
        :rules="[<%- applyValidators(field.fieldType, field.fieldValidateRules) _%>]"
<%_ } _%>
        @keydown.enter.prevent
      />
<%_ } } _%>
<%_ for (relationship of relationshipsToOneOwner) { _%>
      <q-select
        v-model="<%= entityInstance %>.data.<%= relationship.relationshipName %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= relationship.relationshipName %>')"
        :options="[null].concat(<%= relationship.otherEntityNamePlural %>)"
        option-label="<%= relationship.otherEntityField %>"
<%_ if (relationship.relationshipValidate) { _%>
        :rules="[<%- applyValidators(relationship.fieldType, relationship.relationshipValidateRules) _%>]"
<%_ } _%>
      />
<%_ } _%>
<%_ for (relationship of relationshipsToManyOwner) { _%>
      <q-select
        v-model="<%= entityInstance %>.data.<%= relationship.relationshipNamePlural %>"
        :label="$t('<%= i18nKeyPrefix %>.<%= relationship.relationshipName %>')"
        :options="<%= relationship.otherEntityNamePlural %>"
        option-value="id"
        option-label="<%= relationship.otherEntityField %>"
<%_ if (relationship.relationshipValidate) { _%>
        :rules="[<%- applyValidators(relationship.fieldType, relationship.relationshipValidateRules) _%>]"
<%_ } _%>
        multiple
      >
        <template v-slot:option="{ itemProps, opt, selected, toggleOption }">
          <q-item v-bind="itemProps">
            <q-item-section>
              <q-item-label v-html="opt.<%= relationship.otherEntityField %>"></q-item-label>
            </q-item-section>
            <q-item-section side>
              <q-toggle
                :model-value="selected"
                @update:modelValue="toggleOption(opt)"
              />
            </q-item-section>
          </q-item>
        </template>
      </q-select>
<%_ } _%>
      <div class="flex justify-between">
        <q-btn
          type="submit"
          color="primary"
          :label="$t('entity.action.save')"
          :loading="loading"
          :disable="loading"
        />
      </div>
    </q-form>
  </q-page>
</template>

<script>
import { api } from 'boot/axios';
import { useQuasar } from 'quasar';
import { defineComponent, reactive, ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';

export default defineComponent({
  name: 'Page<%= entityAngularName %>Edit',

  setup() {
    const { t } = useI18n();
    const $q = useQuasar();
    const router = useRouter();
    const route = useRoute();

    const <%= entityInstance %> = reactive({
      data: {
<%_ for(field of fields) { _%>
<%_ if (field.fieldType === 'Boolean') { _%>
        <%= field.fieldName %>: false,
<%_} else {_%>
        <%= field.fieldName %>: null,
<%_} _%>
<%_} _%>
<%_ for (relationship of relationshipsToOneOwner) { _%>
        <%= relationship.relationshipName %>: null,
<%_} _%>
<%_ for (relationship of relationshipsToManyOwner) { _%>
        <%= relationship.relationshipNamePlural %>: null,
<%_} _%>
      },
    });

    const loading = ref(false);

    (async function fetch<%= entityAngularName %>() {
      if (route.params.id) {
        <%= entityInstance %>.data = (await api.get(`/api/<%= entityApiUrl %>/${route.params.id}`)).data;
      }
    })();

<%_ for (relationship of relationshipsToOneOwner.concat(relationshipsToManyOwner)) { _%>
    const <%= relationship.otherEntityNamePlural %> = ref([]);
    (async function fetch<%= capitalizeFirstLetter(relationship.otherEntityNamePlural) %>() {
      <%= relationship.otherEntityNamePlural %>.value = (await api.get(`/api/<%= relationship.otherEntityNamePlural %>`)).data;
    })();

<%_} _%>
    const onSubmit = async () => {
      loading.value = true;
      try {
        await api({
          method: <%= entityInstance %>.data.id ? 'put' : 'post',
          url: `/api/<%= entityApiUrl %>/${<%= entityInstance %>.data.id ? <%= entityInstance %>.data.id : ''}`,
          data: <%= entityInstance %>.data,
        });
        router.back();
      } catch (e) {
        if (e.response.status !== 400) return;
        $q.notify({
          type: 'negative',
          message: t(e.response.data.message),
        });
        loading.value = false;
      }
    };

    return {
      <%= entityInstance %>,
<%_ for (relationship of relationshipsToOneOwner.concat(relationshipsToManyOwner)) { _%>
      <%= relationship.otherEntityNamePlural %>,
<%_} _%>
      onSubmit,
      loading,
    };
  },
});
</script>
